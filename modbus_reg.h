#ifndef __MODBUS_REG_H
#define __MODBUS_REG_H

#define MODBUS_REG_MODULE_EN  (1)

#if ( MODBUS_REG_MODULE_EN == 1 )

#define BYTE2_BASE_ADDR  0X0000  // (addr*2 + data*2)
#define BYTE4_BASE_ADDR  0X4000  // (addr*2 + data*4)
#define ARRAY2_BASE_ADDR 0X8000  // (addr*2 + len*2 + data*len)
#define ARRAY4_BASE_ADDR 0XC000  // (addr*2 + len*4 + data*len)
#define MBSREG_END_ADDR  0XFFFF //判断最后寄存器地址

#define USER_CFG_ADDR2   (0X0000 + BYTE2_BASE_ADDR)  // 用户设置
#define USER_CFG_ADDR4   (0X0000 + BYTE4_BASE_ADDR)  // 用户设置
#define TEST_STATE_ADDR2 (0X0800 + BYTE2_BASE_ADDR)  // 测试状态
#define TEST_STATE_ADDR4 (0X0800 + BYTE4_BASE_ADDR)  // 测试状态
#define SYS_STATE_ADDR2  (0X1000 + BYTE2_BASE_ADDR)  // 系统状态
#define SYS_STATE_ADDR4  (0X1000 + BYTE4_BASE_ADDR)  // 系统状态
#define CODE_ADDR2       (0X1800 + BYTE2_BASE_ADDR)  // 用户不可见 包涵修正 设备编号 设置登录口令防止误操作
#define CODE_ADDR4       (0X1800 + BYTE4_BASE_ADDR)  // 用户不可见 包涵修正 设备编号 设置登录口令防止误操作
#define LOG_ADDR2        (0X2000 + BYTE2_BASE_ADDR)  // 存储
#define LOG_ADDR4        (0X2000 + BYTE4_BASE_ADDR)  // 存储


enum{
/* 保持寄存器 Cmd:0X03 0X06 0X10 */

// 用户设置
MBSREG_STORE_CLEAR = USER_CFG_ADDR2,
MBSREG_STORE_NUM,
MBSREG_STORE_RATE,
MBSREG_STORE_STATE,
MBSREG_AUTO_POWER,
MBSREG_LCD_BL,
MBSREG_WIFI_LINK,

MBSREG_SET_AREA = USER_CFG_ADDR4,
MBSREG_SET_AREAs,

// 任务状态
MBSREG_WIFI_STATE = TEST_STATE_ADDR2,
MBSREG_TEST_TYPE,
MBSREG_TEST_MODE,
MBSREG_TEST_UNIT,
MBSREG_SUM_STATE,
MBSREG_WIFI_CFG,

MBSREG_BATTERY_VAL = TEST_STATE_ADDR4,
MBSREG_BATTERY_VALs,
MBSREG_SUM_MAX_VAL,MBSREG_SUM_MAX_VALs,
MBSREG_SUM_MIN_VAL,MBSREG_SUM_MIN_VALs,
MBSREG_SUM_AVG_VAL,MBSREG_SUM_AVG_VALs,
MBSREG_WIND_SPEED,MBSREG_WIND_SPEEDs,
MBSREG_TEMPERATURE,MBSREG_TEMPERATUREs,
MBSREG_HUMIDITY,MBSREG_HUMIDITYs,
MBSREG_DEW_POINT,MBSREG_DEW_POINTs,
MBSREG_WET_BULB,MBSREG_WET_BULBs,
MBSREG_WIND_CHILL,MBSREG_WIND_CHILLs,
MBSREG_AIR_FLOW,MBSREG_AIR_FLOWs,

// 系统状态
MBSREG_BRANCH = SYS_STATE_ADDR2, //产品分支
MBSREG_PKG_MAXLEN,               //分包最大数据长度
MBSREG_PKG_SETLEN,               //设置传输分包大小


MBSREG_VERSION = SYS_STATE_ADDR4, //协议版本
MBSREG_VERSIONs,
MBSREG_BUILD_DATE,MBSREG_BUILD_DATEs,
MBSREG_BUILD_TIME,MBSREG_BUILD_TIMEs,
MBSREG_SYS_DATE,MBSREG_SYS_DATEs,
MBSREG_SYS_TIME,MBSREG_SYS_TIMEs,

// 用户不可见
MBSREG_PRODUCTID = CODE_ADDR2,    //设备ID

MBSREG_U0_ZERO = CODE_ADDR4,
MBSREG_U0_ZEROs,


// 存储
MBSREG_LOG_MAX = LOG_ADDR2,    //设备ID
MBSREG_LOG_NUM,
MBSREG_LOG_POS,
MBSREG_LOG_STATE,

MBSREG_LOG_AUTO_NUM = LOG_ADDR4,
MBSREG_LOG_DATE,
MBSREG_LOG_DATEs,
MBSREG_LOG_TIME,   MBSREG_LOG_TIMEs,
MBSREG_LOG_WIND_VEC,MBSREG_LOG_WIND_VECs,
MBSREG_LOG_TEMP,MBSREG_LOG_TEMPs,
MBSREG_LOG_HUMI,MBSREG_LOG_HUMIs,
MBSREG_LOG_DP,MBSREG_LOG_DPs,
MBSREG_LOG_WB,MBSREG_LOG_WBs,
MBSREG_LOG_CHI,MBSREG_LOG_CHIs,
MBSREG_LOG_FLOW,MBSREG_LOG_FLOWs,
MBSREG_LOG_AREA,MBSREG_LOG_AREAs,

// 演示
MBSREG_DEMO_U08   = 0XF000,
MBSREG_DEMO_I16,
MBSREG_DEMO_U16,
MBSREG_DEMO_I32,
MBSREG_DEMO_I32s,
MBSREG_DEMO_U32,
MBSREG_DEMO_U32s,
MBSREG_DEMO_F32,
MBSREG_DEMO_F32s,
MBSREG_DEMO_STR,    
MBSREG_DEMO_STR1,
};

extern void modbus_reg_init();
extern  int modbus_reg_0X03(unsigned short addr,unsigned short num, char txd[]);
extern  int modbus_reg_0X06(unsigned short addr, char rxd[]);
extern  int modbus_reg_0X10(unsigned short addr,unsigned short num, char rxd[]);

#else

#define modbus_reg_0X03(a, b, c)
#define modbus_reg_0X06(a, b)
#define modbus_reg_0X10(a, b, c)
#define modbus_reg_init()

#endif

#endif

